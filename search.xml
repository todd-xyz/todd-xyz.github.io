<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信小程序开发之一开发起步</title>
      <link href="/%E5%BC%80%E5%8F%91%E8%B5%B7%E6%AD%A5/"/>
      <url>/%E5%BC%80%E5%8F%91%E8%B5%B7%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="微信小程序简介"><a href="#微信小程序简介" class="headerlink" title="微信小程序简介"></a>微信小程序简介</h2><p>小程序是一种不需要下载安装即可使用的应用，体现了“用完即走”的理念。应用场景：线下线上的零售行业，电商平台，生活服务，游戏等。</p><p>其特点是：</p><ul><li><p>无需安装，快速访问。通过微信随时可用。</p></li><li><p>无需适配Android,IOS 等系统。</p></li><li><p>随处可得，易于分享。支持分享给好友或群聊。</p></li></ul><h2 id="小程序开发流程"><a href="#小程序开发流程" class="headerlink" title="小程序开发流程"></a>小程序开发流程</h2><ol><li><p>在<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a>注册账号，设置开发环境。</p></li><li><p>下载<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">开发工具</a>。</p></li></ol><h2 id="在微信开发平台开发设置"><a href="#在微信开发平台开发设置" class="headerlink" title="在微信开发平台开发设置"></a>在微信开发平台开发设置</h2><p>微信小程序只是一种客户端，后台服务需要自己有服务器。要求基于SSL的业已备案过的域名，只能用80端口。<br>登录微信公众平台，【开发】-&gt;[开发设置]，填写你的域名。</p><p><img src="/bolg/%E5%BC%80%E5%8F%91%E8%B5%B7%E6%AD%A5/server_setting.png" alt="服务器域名设置"></p><p>在点击【保存并提交】会进行验证。先来说说在服务器端怎么设置?我们基于KOA搭建服务。可连接到我的<a href="https://github.com/todd-xyz/wx_server" target="_blank" rel="noopener">git hub</a>,clone到服务器直接使用。或按以下步骤一步一步创建。</p><pre class="line-numbers language-Shell"><code class="language-Shell">   mkdir vx_server   cd vx_server   npm init   npm install --save-dev koa-router   npm install --save-dev raw-body   npm install --save-dev sha1     touch app.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是app.js代码：</p><pre class="line-numbers language-javaScript"><code class="language-javaScript">const Koa = require('koa');const router = require('koa-router')();const sha1 = require('sha1')const token = 'your token'  //微信平台开发设置中的token字符串const app = new Koa();app.proxy=true;app.use(async (ctx,next) => {    console.log(`Process $(ctx.request.method) $(ctx.request.url)...`)    await next();});router.get('/' , async(ctx,next)=>{    const { signature, timestamp, nonce, echostr } = ctx.query    const token = token // 微信后台定义的token字符串    const params = [ token, timestamp, nonce ].sort()    // 连接    const str = sha1(params.join(""))    if(str == signature)  // 本地加密的数据与传过来的加密字符串相等      return ctx.body = echostr // 直接返回随机字符串    else return ctx.body = "fail"  //不匹配则认证失败})app.use(router.routes());app.listen(3000);console.log('App start at port 300...');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行服务</p><pre><code>node app.js</code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">微信小程序官方开发文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的常用命令</title>
      <link href="/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Git-简介"><a href="#1-Git-简介" class="headerlink" title="1. Git 简介"></a>1. Git 简介</h2><p>多人编写同一软件，势必要用到版本控制软件，尤其开源软件的盛行，使得这种需求更甚。它可以实现版本回退、对比等多人协同管理功能。<br>Git是一个<code>分布式</code>版本控制软件，最初由Linus花了两周时间编写的（他大爷还是他大爷），于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。<br>2008年，<a href="https://github.com/" target="_blank" rel="noopener">Github</a>网站上线，使得Git更为流行，很多开源软件迁移至Github,作为开源平台，Github依靠赞助，一直未能盈利，亏损严重。<br>2018年，微软以75亿美元收购 GitHub，引起了技术圈的强烈地震，部分开发者直言无法接受，用脚投票迁移去了 GitLab。</p><p>用了一段时间后，感觉零零散散，抽出一点时间，理清概念，归类常用命令。想深入学习可参考廖雪峰的<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a>。</p><h2 id="2-Git原理"><a href="#2-Git原理" class="headerlink" title="2. Git原理"></a>2. Git原理</h2><p>相对于CVS及SVN集中式中央服务器管理，Git特色是分布式的。每个开发人员在本地机器建立分支，直至开发完成才提交到服务器，好处是提交速度快，可不用联网工作。</p><p>由git init命令创建本地仓库(repository),这时，git建立了一个隐藏目录.git。本地仓库由三部分组成。一个是<code>Working Directory</code>，就是目录中的文件；运行<code>git add</code>命令添加到<code>Index</code>,Index被称作staging area;运行git commit 提交到<code>HEAD</code>。所以，文件添加到仓库先git add,再git commit。<br><img src="/bolg/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/flow.jpeg" alt="流程"></p><h2 id="3-Git-基本命令"><a href="#3-Git-基本命令" class="headerlink" title="3. Git 基本命令"></a>3. Git 基本命令</h2><p>Git基本命令由下图可清晰展示：<br><img src="/bolg/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/concept.jpg" alt="基本命令"></p><h4 id="3-1-create-a-new-repository"><a href="#3-1-create-a-new-repository" class="headerlink" title="3.1 create a new repository"></a>3.1 create a new repository</h4><pre><code>git init</code></pre><p>create a working copy of a remote server</p><pre><code>git clone username@host:/path/to/repository </code></pre><h3 id="3-2-add-amp-commit"><a href="#3-2-add-amp-commit" class="headerlink" title="3.2 add &amp; commit"></a>3.2 add &amp; commit</h3><p>把文件添加到Index</p><pre><code>git add &lt;file name&gt;git add * </code></pre><p>把改变提交</p><pre><code>git commit -m &quot;message&quot;</code></pre><p>这时，只是提交到本地仓库，要提交到远程服务器，还需要pushing changes 到远程服务器</p><h3 id="3-3-Pushing-changes"><a href="#3-3-Pushing-changes" class="headerlink" title="3.3 Pushing changes"></a>3.3 Pushing changes</h3><p>如果你的本地仓库是由远程服务器clone创建，用以下命令推送。其中，master是在创建本地仓库时的缺省分支，origin：远程服务器分支。</p><pre><code>git push origin master</code></pre><p>如果不是clone自服务器，先要和服务器建立连接</p><pre><code>git remote add origin &lt;server&gt;</code></pre><h3 id="3-4-branching"><a href="#3-4-branching" class="headerlink" title="3.4 branching"></a>3.4 branching</h3><p>分支是把程序员各自开发分离，比如，创建develop分支用于开发新功能，bug分支用于修复bug。完成后合并到主分支master。<br><img src="/bolg/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/branch.jpeg" alt="branch"><br>创建新分支develop</p><pre><code>git checkout -b develop</code></pre><p>切换到分支master</p><pre><code>git checkout master</code></pre><p>删除分支develop</p><pre><code>git branch -d develop</code></pre><h3 id="3-5-update-amp-merge"><a href="#3-5-update-amp-merge" class="headerlink" title="3.5 update &amp; merge"></a>3.5 update &amp; merge</h3><p>把本地仓库从远程服务器上更新,执行</p><pre><code>git pull</code></pre><p>git 自动会合并，但大多数会产生冲突，需要手动</p><pre><code>git merge &lt;branch&gt;</code></pre><p>在合并之前，可以用</p><pre><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></pre><p>查看不同。</p><h3 id="3-6-replace-local-changes"><a href="#3-6-replace-local-changes" class="headerlink" title="3.6 replace local changes"></a>3.6 replace local changes</h3><p>用版本控制软件的好处是如果你发现现在的修改不想要了，想回到上一个版本，可以执行</p><pre><code>git checkout -- &lt;filename&gt;</code></pre><p>如果不想要所有的本地提交，从服务器上更新最后的版本，可以执行</p><pre><code>git fetch origingit reset --hard origin/master</code></pre><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="1-push时，不用上传到服务器的文件或目录如何设置？"><a href="#1-push时，不用上传到服务器的文件或目录如何设置？" class="headerlink" title="1. push时，不用上传到服务器的文件或目录如何设置？"></a>1. push时，不用上传到服务器的文件或目录如何设置？</h3><p> 创建 .gitignore文件。如：</p><pre><code>*.temp/node_modules</code></pre><p> 规则是</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法</title>
      <link href="/Markdown-%E8%AF%AD%E6%B3%95/"/>
      <url>/Markdown-%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>这几天捣腾了一个博客，要求用Markdown写文章。那么先从Markdown开博，现学现卖。</p><h2 id="什么是Markdwon"><a href="#什么是Markdwon" class="headerlink" title="什么是Markdwon?"></a>什么是Markdwon?</h2><p><code>Markdown</code>是一种介于格式文本和纯文本的标记语言。它由2013年自杀的软件工程师Aaron Swartz 创建。一般的txt文件不用word等文字处理软件没办法控制格式、插入图像、超链接等，而用xml繁琐、不易读；html又杀鸡用牛刀，还要配合css使用。Markdown英文是减价的意思，可能是对xml或html的简化吧，用简单语法控制文本格式。程序员最先熟悉的可能是<a href="http://github.com" target="_blank" rel="noopener">GitHub</a>的README.md。它业已成为程序员的标配。</p><h2 id="Typora安装"><a href="#Typora安装" class="headerlink" title="Typora安装"></a>Typora安装</h2><p>工欲善其事必先利其器，虽然可以直接用文本编辑器写，但对新手来说找个编辑器，随时写，随时预览效果，不失为一种好的选择。在众多的软件中，选择了<code>Typora</code>——随便选，这只是个拐杖，等熟悉了，直接用文本编辑器。在Ubuntu安装命令如下：</p><pre><code>optional, but recommended: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE add Typora&#39;s repository: sudo add-apt-repository deb https://typora.io ./linux/ sudo apt-get update</code></pre><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h3><p> Markdown分六种标题。相当与h1-h6,标题1用1个<code>#</code>，标题2：<code>##</code>…标题6：<code>######</code>,<em>要注意的是<code>#</code>与标题文字有一个空格。</em> 如：</p><pre><code># 标题 1## 标题2### 标题3</code></pre><p><img src="/bolg/Markdown-%E8%AF%AD%E6%B3%95/after.png" alt="效果"></p><h3 id="2-字体控制"><a href="#2-字体控制" class="headerlink" title="2. 字体控制"></a>2. 字体控制</h3><p>删除线，加粗和倾斜字体实例：</p><pre><code>~~我爱我的祖国~~,我**非常非常**热爱***我的***祖国。</code></pre><p><del>我爱我的祖国</del>,我<strong>非常非常</strong>热爱<strong><em>我的</em></strong>祖国。</p><h3 id="3-列表"><a href="#3-列表" class="headerlink" title="3. 列表"></a>3. 列表</h3><h4 id="3-1-无序列表"><a href="#3-1-无序列表" class="headerlink" title="3.1 无序列表"></a>3.1 无序列表</h4><p>用 <code>+</code> 或<code>-</code></p><pre><code>+ 黄瓜+ 菠菜- 黄瓜- 菠菜</code></pre><ul><li>黄瓜</li><li>菠菜</li></ul><ul><li>黄瓜</li><li>菠菜</li></ul><h4 id="3-2-有序列表"><a href="#3-2-有序列表" class="headerlink" title="3.2 有序列表"></a>3.2 有序列表</h4><p>用序号+<code>.</code></p><pre><code>把大象放进冰箱需要三步:1. 把冰箱门打开2. 把大象放进去3. 把冰箱门关上</code></pre><p>把大象放进冰箱需要三步:</p><ol><li>把冰箱门打开</li><li>把大象放进去</li><li>把冰箱门关上</li></ol><h3 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4. 分割线"></a>4. 分割线</h3><p>最常使用就是三个或以上的 <code>***或---</code>。</p><pre><code>***---</code></pre><hr><hr><h3 id="5-超连接"><a href="#5-超连接" class="headerlink" title="5.  超连接"></a>5.  超连接</h3><pre><code>[Todd的Blog](&quot;https://bimsoft.top)</code></pre><p><a href https: bimsoft.top">Todd的Blog</a></p><pre><code>或直接输入链接地址 http://baidu.com`</code></pre><p>或直接输入链接地址 <a href="http://baidu.com" target="_blank" rel="noopener">http://baidu.com</a></p><h3 id="6-图片"><a href="#6-图片" class="headerlink" title="6. 图片"></a>6. 图片</h3><p>和超链接差不多，多一个<code>!</code>。</p><pre><code>![实例图片](https://bimsoft.top/images/markdown.jpg)</code></pre><p><img src="/images/markdown.jpg" alt="实例图片"></p><h3 id="7-代码块"><a href="#7-代码块" class="headerlink" title="7. 代码块"></a>7. 代码块</h3><p>两边各用```包括起来或四个空格</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hellp MD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-表格"><a href="#8-表格" class="headerlink" title="8. 表格"></a>8. 表格</h3><pre><code>名称 | 价格 |  数量  -|-|-黄瓜 | 5.00 | 5 |菠菜 | 8.00| 6 |</code></pre><table><thead><tr><th>名称</th><th>价格</th><th>数量</th></tr></thead><tbody><tr><td>黄瓜</td><td>$5.00</td><td>5</td></tr><tr><td>菠菜</td><td>$8.00</td><td>6</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Markdown语法还是简单的，花个一两天时间即可掌握。</p><p>[End]</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
